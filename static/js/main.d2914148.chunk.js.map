{"version":3,"sources":["GameLogic.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["stateEnum","colorMap","GameLogic","args","Object","classCallCheck","this","numRows","winningNum","rows","cols","toConsumableArray","Array","map","fill","pieces","coords","row","checkCoords","isEmpty","checkLine","str","join","includes","black","String","repeat","red","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","array","checkHorizontal","col","i","num","keys","range","length","rowLength","colLength","k","x","y","push","Piece","_this","_this$props","props","pos","color","style","background","transition","react_default","a","createElement","className","onClick","Component","Board","_Component2","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","_this2","buttons","j","Board_Piece","Header","GameOver","_ref","winner","text","concat","NextTurn","_ref2","who","RestartGame","_ref3","Game","call","numCols","gameLogic","state","initState","bind","assertThisInitialized","restartGame","createPieces","isBlacksTurn","isOver","setState","result","setWinner","forEach","fun","checkWinner","avail","findAvailablePos","checkWinningNum","nextTurn","App_Header","Board_Board","App_GameOver","App_NextTurn","App_RestartGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2914148.chunk.js","sourcesContent":["export const stateEnum = {\n  EMPTY: 0,\n  BLACK: 1,\n  RED: 2\n};\nexport const colorMap = [\"#ccc\", \"black\", \"red\"];\n\nexport default class GameLogic {\n  constructor(args) {\n    this.numRows = args.numRows;\n    this.winningNum = args.winningNum;\n  }\n  createPieces(rows, cols) {\n    return [...Array(rows)].map(() => [...Array(cols)].fill(stateEnum.EMPTY));\n  }\n  isEmpty(pieces, coords) {\n    return pieces[coords[0]][coords[1]] === stateEnum.EMPTY;\n  }\n  findAvailablePos(pieces, coords) {\n    for (let row = this.numRows - 1; row >= 0; row--) {\n      const checkCoords = [row, coords[1]];\n      if (this.isEmpty(pieces, checkCoords)) return checkCoords;\n    }\n    return undefined;\n  }\n  checkHorizontal(pieces) {\n    const checkLine = (row, str) => row.join(\"\").includes(str);\n    const black = String(stateEnum.BLACK).repeat(this.winningNum);\n    const red = String(stateEnum.RED).repeat(this.winningNum);\n    for (let row of pieces) {\n      if (checkLine(row, black)) return stateEnum.BLACK;\n      if (checkLine(row, red)) return stateEnum.RED;\n    }\n    return stateEnum.EMPTY;\n  }\n  checkVertical(pieces) {\n    const transposedMatrix = array =>\n      array[0].map((col, i) => array.map(row => row[i]));\n    return this.checkHorizontal(transposedMatrix(pieces));\n  }\n  range(num) {\n    return [...Array(num).keys()];\n  }\n  checkDiagonal(pieces) {\n    // left -> right\n    const rows = [this.range(pieces.length).map(i => pieces[i][i])];\n    const rowLength = pieces.length;\n    const colLength = pieces[0].length;\n\n    let k = 0;\n    while (k < colLength) {\n      const row = [];\n      let [x, y] = [0, k];\n      while (x < rowLength - k && y < colLength) {\n        row.push(pieces[x][y + 1]);\n        x++;\n        y++;\n      }\n      rows.push(row);\n      k++;\n    }\n    k = 0;\n    while (k < rowLength - 1) {\n      const row = [];\n      let [x, y] = [0, 0];\n      while (x < rowLength && y < colLength - k - 2) {\n        x++;\n        row.push(pieces[x + k][y]);\n        y++;\n      }\n      rows.push(row);\n      k++;\n    }\n    // right -> left\n    rows.push(this.range(pieces.length).map(i => pieces[i][pieces.length - i]));\n    k = 1;\n    while (k < colLength) {\n      k++;\n      let [x, y] = [0, colLength - k];\n      const row = [];\n      while (x < rowLength && y >= 0) {\n        row.push(pieces[x][y]);\n        x++;\n        y--;\n      }\n      rows.push(row);\n    }\n    rows.push(\n      this.range(colLength - 2).map(i => pieces[i + 1][colLength - i - 1])\n    );\n    rows.push(\n      this.range(colLength - 3).map(i => pieces[i + 2][colLength - i - 1])\n    );\n    return this.checkHorizontal(rows);\n  }\n}\n","import React, { Component } from \"react\";\nimport { colorMap } from \"./GameLogic\";\n\nclass Piece extends Component {\n  render() {\n    const { pos, color } = this.props;\n    const style = {\n      background: colorMap[color],\n      transition: \"background 250ms ease-in-out, transform 150ms ease\"\n    };\n    return (\n      <td>\n        <button\n          style={style}\n          className=\"board-button\"\n          onClick={() => this.props.onClick(pos)}\n        />\n      </td>\n    );\n  }\n}\nexport class Board extends Component {\n  render() {\n    const buttons = this.props.pieces.map((row, i) => (\n      <tr key={i}>\n        {row.map((col, j) => (\n          <Piece\n            key={j}\n            pos={[i, j]}\n            onClick={this.props.onClick}\n            color={col}\n          />\n        ))}\n      </tr>\n    ));\n    return (\n      <table className=\"board-table\">\n        <tbody>{buttons}</tbody>\n      </table>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Board } from \"./Board\";\nimport GameLogic, { stateEnum, colorMap } from \"./GameLogic\";\nimport \"./App.css\";\n\nconst Header = () => {\n  return <div className=\"header\">Connect Four</div>;\n};\nconst GameOver = ({ winner }) => {\n  const text = winner ? `${winner} wins!` : \"Game over!\";\n  return <div className=\"game-over\">{text}</div>;\n};\n\nconst NextTurn = ({ who }) => {\n  return <div className=\"next-turn\">Next Player: {who}</div>;\n};\nconst RestartGame = ({ onClick }) => {\n  return (\n    <button className=\"restart-button\" onClick={onClick}>\n      Restart game\n    </button>\n  );\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.winningNum = 4;\n    this.numRows = 6;\n    this.numCols = 7;\n    this.gameLogic = new GameLogic({\n      numRows: this.numRows,\n      winningNum: this.winningNum\n    });\n    this.state = this.initState();\n    this.onClick = this.onClick.bind(this);\n    this.restartGame = this.restartGame.bind(this);\n  }\n  initState() {\n    return {\n      pieces: this.gameLogic.createPieces(this.numRows, this.numCols),\n      isBlacksTurn: true,\n      isOver: false,\n      winner: \"\"\n    };\n  }\n  setWinner(winner) {\n    this.setState({ winner, isOver: true });\n  }\n  checkWinner(result) {\n    if (result !== stateEnum.EMPTY) {\n      this.setWinner(result);\n      return true;\n    }\n    return false;\n  }\n  checkWinningNum() {\n    [\"checkHorizontal\", \"checkVertical\", \"checkDiagonal\"].forEach(fun => {\n      if (this.checkWinner(this.gameLogic[fun](this.state.pieces))) return;\n    });\n  }\n  onClick(coords) {\n    if (this.state.isOver) return;\n\n    const color = this.state.isBlacksTurn ? stateEnum.BLACK : stateEnum.RED;\n    const pieces = [...this.state.pieces];\n    if (!this.gameLogic.isEmpty(pieces, coords)) return;\n\n    const avail = this.gameLogic.findAvailablePos(pieces, coords);\n    if (avail === undefined) return;\n    pieces[avail[0]][avail[1]] = color;\n    this.checkWinningNum();\n    this.setState({ pieces, isBlacksTurn: !this.state.isBlacksTurn });\n  }\n  restartGame() {\n    this.setState(this.initState());\n  }\n  render() {\n    const nextTurn = this.state.isBlacksTurn ? \"BLACK\" : \"RED\";\n    return (\n      <div className=\"game\">\n        <Header />\n        <Board pieces={this.state.pieces} onClick={this.onClick} />\n        {this.state.isOver ? (\n          <GameOver winner={colorMap[this.state.winner]} />\n        ) : (\n          <NextTurn who={nextTurn} />\n        )}\n        <RestartGame onClick={this.restartGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}