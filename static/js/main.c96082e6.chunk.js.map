{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GameOver","_ref","winner","react_default","a","createElement","className","stateEnum","EMPTY","RED","BLACK","Piece","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","onClick","pos","_this$props","style","background","color","key","data","Component","Board","_this2","buttons","pieces","map","row","i","col","j","App_Piece","concat","Game","_this3","numRows","numCols","WINNING_NUM","state","createPieces","paused","isBlacksTurn","isOver","rows","cols","toConsumableArray","Array","fill","split","parseInt","coords","checkCoords","isEmpty","black","repeat","red","checkLine","str","join","includes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","array","checkHorizontal","setState","result","setWinner","horizontal","checkWinner","vertical","checkVertical","diagonal","checkDiagonal","getCoords","avail","findAvailablePos","hasFour","App_GameOver","App_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c96082e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst GameOver = ({ winner }) => {\n  return (\n    <div className=\"game-over\">\n      {winner} wins!\n      <div />\n    </div>\n  );\n};\n\nconst stateEnum = {\n  EMPTY: \"#bbb\",\n  RED: \"red\",\n  BLACK: \"black\"\n};\n\nclass Piece extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.props.onClick(this.props.pos);\n  }\n  render() {\n    const { pos, color } = this.props;\n    const style = {\n      background: color\n    };\n    return (\n      <td key={pos}>\n        <button\n          style={style}\n          className=\"board-button\"\n          onClick={this.handleClick}\n          data={pos}\n        />\n      </td>\n    );\n  }\n}\nclass Board extends Component {\n  render() {\n    const buttons = this.props.pieces.map((row, i) => (\n      <tr key={i}>\n        {row.map((col, j) => (\n          <Piece\n            key={j}\n            pos={`${i}:${j}`}\n            onClick={this.props.onClick}\n            color={col}\n          />\n        ))}\n      </tr>\n    ));\n    return (\n      <table>\n        <tbody>{buttons}</tbody>\n      </table>\n    );\n  }\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.numRows = 6;\n    this.numCols = 7;\n    this.WINNING_NUM = 4;\n    this.state = {\n      pieces: this.createPieces(this.numRows, this.numCols),\n      paused: false,\n      isBlacksTurn: true,\n      isOver: false,\n      winner: \"\"\n    };\n    this.onClick = this.onClick.bind(this);\n  }\n  createPieces(rows, cols) {\n    return [...Array(rows)].map(() => [...Array(cols)].fill(stateEnum.EMPTY));\n  }\n\n  getCoords(pos) {\n    return pos.split(\":\").map(i => parseInt(i));\n  }\n  isEmpty(coords) {\n    return this.state.pieces[coords[0]][coords[1]] === stateEnum.EMPTY;\n  }\n  isRed(coords) {\n    return this.state.pieces[coords[0]][coords[1]] === stateEnum.RED;\n  }\n  isBlack(coords) {\n    return this.state.pieces[coords[0]][coords[1]] === stateEnum.BLACK;\n  }\n  findAvailablePos(coords) {\n    for (let row = this.numRows - 1; row >= 0; row--) {\n      const checkCoords = [row, coords[1]];\n      if (this.isEmpty(checkCoords)) return checkCoords;\n    }\n    return undefined;\n  }\n  checkHorizontal(pieces) {\n    const black = stateEnum.BLACK.repeat(this.WINNING_NUM);\n    const red = stateEnum.RED.repeat(this.WINNING_NUM);\n    const checkLine = (row, str) => row.join(\"\").includes(str);\n    for (let row of pieces) {\n      if (checkLine(row, black)) return stateEnum.BLACK;\n      if (checkLine(row, red)) return stateEnum.RED;\n    }\n    return stateEnum.EMPTY;\n  }\n  checkVertical(pieces) {\n    const transposedMatrix = array =>\n      array[0].map((col, i) => array.map(row => row[i]));\n    return this.checkHorizontal(transposedMatrix(pieces));\n  }\n  checkDiagonal() {\n    return stateEnum.EMPTY;\n  }\n  setWinner(winner) {\n    this.setState({ winner, isOver: true }, () => {});\n  }\n  checkWinner(result) {\n    if (result !== stateEnum.EMPTY) {\n      this.setWinner(result);\n      return true;\n    }\n    return false;\n  }\n  hasFour() {\n    const horizontal = this.checkHorizontal(this.state.pieces);\n    if (this.checkWinner(horizontal)) return;\n    const vertical = this.checkVertical(this.state.pieces);\n    if (this.checkWinner(vertical)) return;\n    const diagonal = this.checkDiagonal();\n    if (this.checkWinner(diagonal)) return;\n  }\n  onClick(pos) {\n    const color = this.state.isBlacksTurn ? stateEnum.BLACK : stateEnum.RED;\n    const pieces = [...this.state.pieces];\n    const coords = this.getCoords(pos);\n    if (!this.isEmpty(coords)) return;\n    const avail = this.findAvailablePos(coords);\n    if (avail === undefined) return;\n    pieces[avail[0]][avail[1]] = color;\n    this.hasFour();\n    this.setState({ pieces, isBlacksTurn: !this.state.isBlacksTurn });\n  }\n  render() {\n    if (this.state.isOver) {\n      return <GameOver winner={this.state.winner} />;\n    }\n    return (\n      <div className=\"game\">\n        <Board pieces={this.state.pieces} onClick={this.onClick} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}