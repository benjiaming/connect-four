{"version":3,"sources":["Board.js","GameLogic.js","App.js","serviceWorker.js","index.js"],"names":["Piece","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","onClick","pos","_this$props","style","background","color","react_default","a","createElement","key","className","data","Component","Board","_Component2","apply","arguments","inherits","createClass","value","_this2","buttons","pieces","map","row","i","col","j","Board_Piece","concat","stateEnum","EMPTY","RED","BLACK","GameLogic","numRows","winningNum","WINNING_NUM","rows","cols","toConsumableArray","Array","fill","split","parseInt","coords","checkCoords","isEmpty","checkLine","str","join","includes","black","repeat","red","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","array","checkHorizontal","num","keys","range","length","rowLength","colLength","k","x","y","push","Header","GameOver","_ref","winner","text","NextTurn","_ref2","who","RestartGame","_ref3","Game","numCols","gameLogic","state","initState","restartGame","createPieces","isBlacksTurn","isOver","setState","result","setWinner","horizontal","checkWinner","vertical","checkVertical","diagonal","checkDiagonal","console","log","getCoords","avail","findAvailablePos","checkFour","nextTurn","App_Header","Board_Board","App_GameOver","App_NextTurn","App_RestartGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d024182c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Piece extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.props.onClick(this.props.pos);\n  }\n  render() {\n    const { pos, color } = this.props;\n    const style = {\n      background: color\n    };\n    return (\n      <td key={pos}>\n        <button\n          style={style}\n          className=\"board-button\"\n          onClick={this.handleClick}\n          data={pos}\n        />\n      </td>\n    );\n  }\n}\nexport class Board extends Component {\n  render() {\n    const buttons = this.props.pieces.map((row, i) => (\n      <tr key={i}>\n        {row.map((col, j) => (\n          <Piece\n            key={j}\n            pos={`${i}:${j}`}\n            onClick={this.props.onClick}\n            color={col}\n          />\n        ))}\n      </tr>\n    ));\n    return (\n      <table className=\"board-table\">\n        <tbody>{buttons}</tbody>\n      </table>\n    );\n  }\n}\n","export const stateEnum = {\n  EMPTY: \"#bbb\",\n  RED: \"red\",\n  BLACK: \"black\"\n};\n\nexport default class GameLogic {\n  constructor(numRows, winningNum) {\n    this.numRows = numRows;\n    this.WINNING_NUM = winningNum;\n  }\n  createPieces(rows, cols) {\n    return [...Array(rows)].map(() => [...Array(cols)].fill(stateEnum.EMPTY));\n  }\n  getCoords(pos) {\n    return pos.split(\":\").map(i => parseInt(i));\n  }\n  isEmpty(pieces, coords) {\n    return pieces[coords[0]][coords[1]] === stateEnum.EMPTY;\n  }\n  findAvailablePos(pieces, coords) {\n    for (let row = this.numRows - 1; row >= 0; row--) {\n      const checkCoords = [row, coords[1]];\n      if (this.isEmpty(pieces, checkCoords)) return checkCoords;\n    }\n    return undefined;\n  }\n  checkHorizontal(pieces) {\n    const checkLine = (row, str) => row.join(\"\").includes(str);\n    const black = stateEnum.BLACK.repeat(this.WINNING_NUM);\n    const red = stateEnum.RED.repeat(this.WINNING_NUM);\n    for (let row of pieces) {\n      if (checkLine(row, black)) return stateEnum.BLACK;\n      if (checkLine(row, red)) return stateEnum.RED;\n    }\n    return stateEnum.EMPTY;\n  }\n  checkVertical(pieces) {\n    const transposedMatrix = array =>\n      array[0].map((col, i) => array.map(row => row[i]));\n    return this.checkHorizontal(transposedMatrix(pieces));\n  }\n  range(num) {\n    return [...Array(num).keys()];\n  }\n  checkDiagonal(pieces) {\n    // left -> right\n    const rows = [this.range(pieces.length).map(i => pieces[i][i])];\n    const rowLength = pieces.length;\n    const colLength = pieces[0].length;\n\n    let k = 0;\n    while (k < colLength) {\n      const row = [];\n      let [x, y] = [0, k];\n      while (x < rowLength - k && y < colLength) {\n        row.push(pieces[x][y + 1]);\n        x++;\n        y++;\n      }\n      rows.push(row);\n      k++;\n    }\n    k = 0;\n    while (k < rowLength - 1) {\n      const row = [];\n      let [x, y] = [0, 0];\n      while (x < rowLength && y < colLength - k - 2) {\n        x++;\n        row.push(pieces[x + k][y]);\n        y++;\n      }\n      rows.push(row);\n      k++;\n    }\n    // right -> left\n    rows.push(this.range(pieces.length).map(i => pieces[i][pieces.length - i]));\n    k = 1;\n    while (k < colLength) {\n      k++;\n      let [x, y] = [0, colLength - k];\n      const row = [];\n      while (x < rowLength && y >= 0) {\n        row.push(pieces[x][y]);\n        x++;\n        y--;\n      }\n      rows.push(row);\n    }\n    rows.push(\n      this.range(colLength - 2).map(i => pieces[i + 1][colLength - i - 1])\n    );\n    rows.push(\n      this.range(colLength - 3).map(i => pieces[i + 2][colLength - i - 1])\n    );\n    return this.checkHorizontal(rows);\n  }\n}\n","import React, { Component } from \"react\";\nimport { Board } from \"./Board\";\nimport GameLogic, { stateEnum } from \"./GameLogic\";\nimport \"./App.css\";\n\nconst Header = () => {\n  return <div className=\"header\">Connect Four</div>;\n};\nconst GameOver = ({ winner }) => {\n  const text = winner ? `${winner} wins!` : \"Game over!\";\n  return <div className=\"game-over\">{text}</div>;\n};\n\nconst NextTurn = ({ who }) => {\n  return <div className=\"next-turn\">Next Player: {who}</div>;\n};\nconst RestartGame = ({ onClick }) => {\n  return (\n    <button className=\"restart-button\" onClick={onClick}>\n      Restart game\n    </button>\n  );\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.WINNING_NUM = 4;\n    this.numRows = 6;\n    this.numCols = 7;\n    this.gameLogic = new GameLogic(this.numRows, this.WINNING_NUM);\n    this.state = this.initState();\n    this.onClick = this.onClick.bind(this);\n    this.restartGame = this.restartGame.bind(this);\n  }\n  initState() {\n    return {\n      pieces: this.gameLogic.createPieces(this.numRows, this.numCols),\n      isBlacksTurn: true,\n      isOver: false,\n      winner: \"\"\n    };\n  }\n  setWinner(winner) {\n    this.setState({ winner, isOver: true }, () => {});\n  }\n  checkWinner(result) {\n    if (result !== stateEnum.EMPTY) {\n      this.setWinner(result);\n      return true;\n    }\n    return false;\n  }\n  checkFour() {\n    const horizontal = this.gameLogic.checkHorizontal(this.state.pieces);\n    if (this.checkWinner(horizontal)) return;\n    const vertical = this.gameLogic.checkVertical(this.state.pieces);\n    if (this.checkWinner(vertical)) return;\n    const diagonal = this.gameLogic.checkDiagonal(this.state.pieces);\n    if (this.checkWinner(diagonal)) return;\n  }\n  onClick(pos) {\n    console.log(\"onclick\", this.state);\n    if (this.state.isOver) return;\n    const color = this.state.isBlacksTurn ? stateEnum.BLACK : stateEnum.RED;\n    const pieces = [...this.state.pieces];\n    const coords = this.gameLogic.getCoords(pos);\n    if (!this.gameLogic.isEmpty(this.state.pieces, coords)) return;\n    const avail = this.gameLogic.findAvailablePos(this.state.pieces, coords);\n    if (avail === undefined) return;\n    pieces[avail[0]][avail[1]] = color;\n    this.checkFour();\n    this.setState({ pieces, isBlacksTurn: !this.state.isBlacksTurn });\n  }\n  restartGame() {\n    this.setState(this.initState());\n  }\n  render() {\n    const nextTurn = this.state.isBlacksTurn ? \"BLACK\" : \"RED\";\n    return (\n      <div className=\"game\">\n        <Header />\n        <Board pieces={this.state.pieces} onClick={this.onClick} />\n        {this.state.isOver ? (\n          <GameOver winner={this.state.winner} />\n        ) : (\n          <NextTurn who={nextTurn} />\n        )}\n        <RestartGame onClick={this.restartGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}